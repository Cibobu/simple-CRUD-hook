{"ast":null,"code":"import _defineProperty from\"D:\\\\project\\\\react\\\\test-react\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/defineProperty\";import _objectSpread from\"D:\\\\project\\\\react\\\\test-react\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread2\";import _slicedToArray from\"D:\\\\project\\\\react\\\\test-react\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";import React,{useState,useEffect}from'react';var EditUserForm=function EditUserForm(props){var _useState=useState(props.currentUser),_useState2=_slicedToArray(_useState,2),user=_useState2[0],setUser=_useState2[1];useEffect(function(){setUser(props.currentUser);},[props]);// You can tell React to skip applying an effect if certain values haven’t changed between re-renders. [ props ]\nvar handleInputChange=function handleInputChange(event){var _event$target=event.target,name=_event$target.name,value=_event$target.value;setUser(_objectSpread({},user,_defineProperty({},name,value)));};return React.createElement(\"form\",{onSubmit:function onSubmit(event){event.preventDefault();props.updateUser(user.id,user);}},React.createElement(\"label\",null,\"Account Name\"),React.createElement(\"input\",{type:\"text\",name:\"accountName\",value:user.accountName,onChange:handleInputChange}),React.createElement(\"label\",null,\"Account Number\"),React.createElement(\"input\",{type:\"number\",name:\"accountNumber\",value:user.accountNumber,onChange:handleInputChange}),React.createElement(\"label\",null,\"Address\"),React.createElement(\"input\",{type:\"text\",name:\"address\",value:user.address,onChange:handleInputChange}),React.createElement(\"label\",null,\"City\"),React.createElement(\"input\",{type:\"text\",name:\"city\",value:user.city,onChange:handleInputChange}),React.createElement(\"label\",null,\"Country\"),React.createElement(\"input\",{type:\"text\",name:\"country\",value:user.country,onChange:handleInputChange}),React.createElement(\"button\",null,\"Update account\"),React.createElement(\"button\",{onClick:function onClick(){return props.setEditing(false);},className:\"button muted-button\"},\"Cancel\"));};export default EditUserForm;","map":{"version":3,"sources":["D:/project/react/test-react/src/forms/EditUserForm.js"],"names":["React","useState","useEffect","EditUserForm","props","currentUser","user","setUser","handleInputChange","event","target","name","value","preventDefault","updateUser","id","accountName","accountNumber","address","city","country","setEditing"],"mappings":"+cAAA,MAAOA,CAAAA,KAAP,EAAgBC,QAAhB,CAA0BC,SAA1B,KAA2C,OAA3C,CAEA,GAAMC,CAAAA,YAAY,CAAG,QAAfA,CAAAA,YAAe,CAAAC,KAAK,CAAI,eACFH,QAAQ,CAACG,KAAK,CAACC,WAAP,CADN,wCACpBC,IADoB,eACdC,OADc,eAG5BL,SAAS,CACP,UAAM,CACJK,OAAO,CAACH,KAAK,CAACC,WAAP,CAAP,CACD,CAHM,CAIP,CAAED,KAAF,CAJO,CAAT,CAMA;AAEA,GAAMI,CAAAA,iBAAiB,CAAG,QAApBA,CAAAA,iBAAoB,CAAAC,KAAK,CAAI,mBACTA,KAAK,CAACC,MADG,CACzBC,IADyB,eACzBA,IADyB,CACnBC,KADmB,eACnBA,KADmB,CAGjCL,OAAO,kBAAMD,IAAN,oBAAaK,IAAb,CAAoBC,KAApB,GAAP,CACD,CAJD,CAMA,MACE,6BACE,QAAQ,CAAE,kBAAAH,KAAK,CAAI,CACjBA,KAAK,CAACI,cAAN,GAEAT,KAAK,CAACU,UAAN,CAAiBR,IAAI,CAACS,EAAtB,CAA0BT,IAA1B,EACD,CALH,EAOE,gDAPF,CAQD,6BAAO,IAAI,CAAC,MAAZ,CAAmB,IAAI,CAAC,aAAxB,CAAsC,KAAK,CAAEA,IAAI,CAACU,WAAlD,CAA+D,QAAQ,CAAER,iBAAzE,EARC,CASD,kDATC,CAUD,6BAAO,IAAI,CAAC,QAAZ,CAAqB,IAAI,CAAC,eAA1B,CAA0C,KAAK,CAAEF,IAAI,CAACW,aAAtD,CAAqE,QAAQ,CAAET,iBAA/E,EAVC,CAWD,2CAXC,CAYD,6BAAO,IAAI,CAAC,MAAZ,CAAmB,IAAI,CAAC,SAAxB,CAAkC,KAAK,CAAEF,IAAI,CAACY,OAA9C,CAAuD,QAAQ,CAAEV,iBAAjE,EAZC,CAaD,wCAbC,CAcD,6BAAO,IAAI,CAAC,MAAZ,CAAmB,IAAI,CAAC,MAAxB,CAA+B,KAAK,CAAEF,IAAI,CAACa,IAA3C,CAAiD,QAAQ,CAAEX,iBAA3D,EAdC,CAeD,2CAfC,CAgBD,6BAAO,IAAI,CAAC,MAAZ,CAAmB,IAAI,CAAC,SAAxB,CAAkC,KAAK,CAAEF,IAAI,CAACc,OAA9C,CAAuD,QAAQ,CAAEZ,iBAAjE,EAhBC,CAiBE,mDAjBF,CAkBE,8BAAQ,OAAO,CAAE,yBAAMJ,CAAAA,KAAK,CAACiB,UAAN,CAAiB,KAAjB,CAAN,EAAjB,CAAgD,SAAS,CAAC,qBAA1D,WAlBF,CADF,CAwBD,CAzCD,CA2CA,cAAelB,CAAAA,YAAf","sourcesContent":["import React, { useState, useEffect } from 'react'\n\nconst EditUserForm = props => {\n  const [ user, setUser ] = useState(props.currentUser)\n\n  useEffect(\n    () => {\n      setUser(props.currentUser)\n    },\n    [ props ]\n  )\n  // You can tell React to skip applying an effect if certain values haven’t changed between re-renders. [ props ]\n\n  const handleInputChange = event => {\n    const { name, value } = event.target\n\n    setUser({ ...user, [name]: value })\n  }\n\n  return (\n    <form\n      onSubmit={event => {\n        event.preventDefault()\n\n        props.updateUser(user.id, user)\n      }}\n    >\n      <label>Account Name</label>\n\t\t\t<input type=\"text\" name=\"accountName\" value={user.accountName} onChange={handleInputChange} />\n\t\t\t<label>Account Number</label>\n\t\t\t<input type=\"number\" name=\"accountNumber\" value={user.accountNumber} onChange={handleInputChange} />\n\t\t\t<label>Address</label>\n\t\t\t<input type=\"text\" name=\"address\" value={user.address} onChange={handleInputChange} />\n\t\t\t<label>City</label>\n\t\t\t<input type=\"text\" name=\"city\" value={user.city} onChange={handleInputChange} />\n\t\t\t<label>Country</label>\n\t\t\t<input type=\"text\" name=\"country\" value={user.country} onChange={handleInputChange} />\n      <button>Update account</button>\n      <button onClick={() => props.setEditing(false)} className=\"button muted-button\">\n        Cancel\n      </button>\n    </form>\n  )\n}\n\nexport default EditUserForm\n"]},"metadata":{},"sourceType":"module"}