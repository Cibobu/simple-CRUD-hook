{"ast":null,"code":"import _defineProperty from \"D:\\\\project\\\\react\\\\test-react\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/defineProperty\";\nimport _objectSpread from \"D:\\\\project\\\\react\\\\test-react\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread2\";\nimport _slicedToArray from \"D:\\\\project\\\\react\\\\test-react\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"D:\\\\project\\\\react\\\\test-react\\\\src\\\\forms\\\\EditUserForm.js\";\nimport React, { useState, useEffect } from 'react';\n\nvar EditUserForm = function EditUserForm(props) {\n  var _useState = useState(props.currentUser),\n      _useState2 = _slicedToArray(_useState, 2),\n      user = _useState2[0],\n      setUser = _useState2[1];\n\n  useEffect(function () {\n    setUser(props.currentUser);\n  }, [props]); // You can tell React to skip applying an effect if certain values haven’t changed between re-renders. [ props ]\n\n  var handleInputChange = function handleInputChange(event) {\n    var _event$target = event.target,\n        name = _event$target.name,\n        value = _event$target.value;\n    setUser(_objectSpread({}, user, _defineProperty({}, name, value)));\n  };\n\n  return React.createElement(\"form\", {\n    onSubmit: function onSubmit(event) {\n      event.preventDefault();\n      props.updateUser(user.id, user);\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 21\n    },\n    __self: this\n  }, React.createElement(\"label\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 28\n    },\n    __self: this\n  }, \"Account Name\"), React.createElement(\"input\", {\n    type: \"text\",\n    name: \"accountName\",\n    value: user.accountName,\n    onChange: handleInputChange,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 29\n    },\n    __self: this\n  }), React.createElement(\"label\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 30\n    },\n    __self: this\n  }, \"Account Number\"), React.createElement(\"input\", {\n    type: \"number\",\n    name: \"accountNumber\",\n    value: user.accountNumber,\n    onChange: handleInputChange,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31\n    },\n    __self: this\n  }), React.createElement(\"label\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32\n    },\n    __self: this\n  }, \"Address\"), React.createElement(\"input\", {\n    type: \"text\",\n    name: \"address\",\n    value: user.address,\n    onChange: handleInputChange,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33\n    },\n    __self: this\n  }), React.createElement(\"label\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34\n    },\n    __self: this\n  }, \"City\"), React.createElement(\"input\", {\n    type: \"text\",\n    name: \"city\",\n    value: user.city,\n    onChange: handleInputChange,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35\n    },\n    __self: this\n  }), React.createElement(\"label\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36\n    },\n    __self: this\n  }, \"Country\"), React.createElement(\"input\", {\n    type: \"text\",\n    name: \"country\",\n    value: user.country,\n    onChange: handleInputChange,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37\n    },\n    __self: this\n  }), React.createElement(\"button\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38\n    },\n    __self: this\n  }, \"Update account\"), React.createElement(\"button\", {\n    onClick: function onClick() {\n      return props.setEditing(false);\n    },\n    className: \"button muted-button\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39\n    },\n    __self: this\n  }, \"Cancel\"));\n};\n\nexport default EditUserForm;","map":{"version":3,"sources":["D:/project/react/test-react/src/forms/EditUserForm.js"],"names":["React","useState","useEffect","EditUserForm","props","currentUser","user","setUser","handleInputChange","event","target","name","value","preventDefault","updateUser","id","accountName","accountNumber","address","city","country","setEditing"],"mappings":";;;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;;AAEA,IAAMC,YAAY,GAAG,SAAfA,YAAe,CAAAC,KAAK,EAAI;AAAA,kBACFH,QAAQ,CAACG,KAAK,CAACC,WAAP,CADN;AAAA;AAAA,MACpBC,IADoB;AAAA,MACdC,OADc;;AAG5BL,EAAAA,SAAS,CACP,YAAM;AACJK,IAAAA,OAAO,CAACH,KAAK,CAACC,WAAP,CAAP;AACD,GAHM,EAIP,CAAED,KAAF,CAJO,CAAT,CAH4B,CAS5B;;AAEA,MAAMI,iBAAiB,GAAG,SAApBA,iBAAoB,CAAAC,KAAK,EAAI;AAAA,wBACTA,KAAK,CAACC,MADG;AAAA,QACzBC,IADyB,iBACzBA,IADyB;AAAA,QACnBC,KADmB,iBACnBA,KADmB;AAGjCL,IAAAA,OAAO,mBAAMD,IAAN,sBAAaK,IAAb,EAAoBC,KAApB,GAAP;AACD,GAJD;;AAMA,SACE;AACE,IAAA,QAAQ,EAAE,kBAAAH,KAAK,EAAI;AACjBA,MAAAA,KAAK,CAACI,cAAN;AAEAT,MAAAA,KAAK,CAACU,UAAN,CAAiBR,IAAI,CAACS,EAAtB,EAA0BT,IAA1B;AACD,KALH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAOE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAPF,EAQD;AAAO,IAAA,IAAI,EAAC,MAAZ;AAAmB,IAAA,IAAI,EAAC,aAAxB;AAAsC,IAAA,KAAK,EAAEA,IAAI,CAACU,WAAlD;AAA+D,IAAA,QAAQ,EAAER,iBAAzE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IARC,EASD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBATC,EAUD;AAAO,IAAA,IAAI,EAAC,QAAZ;AAAqB,IAAA,IAAI,EAAC,eAA1B;AAA0C,IAAA,KAAK,EAAEF,IAAI,CAACW,aAAtD;AAAqE,IAAA,QAAQ,EAAET,iBAA/E;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAVC,EAWD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eAXC,EAYD;AAAO,IAAA,IAAI,EAAC,MAAZ;AAAmB,IAAA,IAAI,EAAC,SAAxB;AAAkC,IAAA,KAAK,EAAEF,IAAI,CAACY,OAA9C;AAAuD,IAAA,QAAQ,EAAEV,iBAAjE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAZC,EAaD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAbC,EAcD;AAAO,IAAA,IAAI,EAAC,MAAZ;AAAmB,IAAA,IAAI,EAAC,MAAxB;AAA+B,IAAA,KAAK,EAAEF,IAAI,CAACa,IAA3C;AAAiD,IAAA,QAAQ,EAAEX,iBAA3D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAdC,EAeD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eAfC,EAgBD;AAAO,IAAA,IAAI,EAAC,MAAZ;AAAmB,IAAA,IAAI,EAAC,SAAxB;AAAkC,IAAA,KAAK,EAAEF,IAAI,CAACc,OAA9C;AAAuD,IAAA,QAAQ,EAAEZ,iBAAjE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAhBC,EAiBE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBAjBF,EAkBE;AAAQ,IAAA,OAAO,EAAE;AAAA,aAAMJ,KAAK,CAACiB,UAAN,CAAiB,KAAjB,CAAN;AAAA,KAAjB;AAAgD,IAAA,SAAS,EAAC,qBAA1D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAlBF,CADF;AAwBD,CAzCD;;AA2CA,eAAelB,YAAf","sourcesContent":["import React, { useState, useEffect } from 'react'\n\nconst EditUserForm = props => {\n  const [ user, setUser ] = useState(props.currentUser)\n\n  useEffect(\n    () => {\n      setUser(props.currentUser)\n    },\n    [ props ]\n  )\n  // You can tell React to skip applying an effect if certain values haven’t changed between re-renders. [ props ]\n\n  const handleInputChange = event => {\n    const { name, value } = event.target\n\n    setUser({ ...user, [name]: value })\n  }\n\n  return (\n    <form\n      onSubmit={event => {\n        event.preventDefault()\n\n        props.updateUser(user.id, user)\n      }}\n    >\n      <label>Account Name</label>\n\t\t\t<input type=\"text\" name=\"accountName\" value={user.accountName} onChange={handleInputChange} />\n\t\t\t<label>Account Number</label>\n\t\t\t<input type=\"number\" name=\"accountNumber\" value={user.accountNumber} onChange={handleInputChange} />\n\t\t\t<label>Address</label>\n\t\t\t<input type=\"text\" name=\"address\" value={user.address} onChange={handleInputChange} />\n\t\t\t<label>City</label>\n\t\t\t<input type=\"text\" name=\"city\" value={user.city} onChange={handleInputChange} />\n\t\t\t<label>Country</label>\n\t\t\t<input type=\"text\" name=\"country\" value={user.country} onChange={handleInputChange} />\n      <button>Update account</button>\n      <button onClick={() => props.setEditing(false)} className=\"button muted-button\">\n        Cancel\n      </button>\n    </form>\n  )\n}\n\nexport default EditUserForm\n"]},"metadata":{},"sourceType":"module"}